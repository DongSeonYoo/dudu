generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Attendance {
  idx        Int       @id @default(autoincrement())
  studentIdx Int       @map("student_idx")
  isOuting   Boolean   @default(false) @map("is_outing")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  checkInAt  DateTime  @map("check_in_at") @db.Timestamptz(6)
  checkOutAt DateTime? @map("check_out_at") @db.Timestamptz(6)
  Student    Student   @relation(fields: [studentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_to_attendance")
  outing     outing[]

  @@map("attendance")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Enrollment {
  idx        Int       @id @default(autoincrement())
  studentIdx Int       @map("student_idx")
  startedAt  DateTime  @map("started_at") @db.Timestamptz(6)
  endedAt    DateTime  @map("ended_at") @db.Timestamptz(6)
  amount     Int
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  Student    Student   @relation(fields: [studentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_to_enrollment")

  @@map("enrollment")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Parent {
  idx         Int      @id @default(autoincrement())
  studentIdx  Int      @map("student_idx")
  name        String   @db.VarChar
  phoneNumber String   @map("phone_number") @db.Char(11)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  Student     Student  @relation(fields: [studentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_to_parent")

  @@map("parent")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Student {
  idx             Int               @id @default(autoincrement())
  gender          String            @db.VarChar
  school          String            @default("무소속") @db.VarChar
  name            String            @db.VarChar
  phoneNumber     String            @map("phone_number") @db.Char(11)
  email           String?           @db.VarChar
  birthDate       DateTime          @map("birth_date") @db.Date
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamptz(6)
  type            TYPE
  studentNumber   String            @map("student_number") @db.Char(4)
  AcademySchedule AcademySchedule[]
  Attendance      Attendance[]
  Enrollment      Enrollment[]
  outing          outing[]
  Parent          Parent[]

  @@unique([studentNumber, deletedAt], map: "unique_student_number_deleted_at")
  @@map("student")
}

model AcademySchedule {
  idx          Int      @id(map: "academy_schedule_pk") @default(autoincrement())
  student_idx  Int
  academy_name String   @db.VarChar
  daysOfWeek   Int      @map("days_of_week") @db.SmallInt
  startedAt    DateTime @map("started_at") @db.Timestamptz(6)
  endedAt      DateTime @map("ended_at") @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  student      Student  @relation(fields: [student_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "academy_schedule_student_idx_fk")

  @@map("academy_schedule")
}

model outing {
  studentIdx    Int @map("student_idx")
  attendanceIdx Int @map("attendance_idx")
  startedAt     DateTime   @db.Timestamptz(6) @map("started_at")
  endedAt       DateTime   @db.Timestamptz(6) @map("ended_at")
  reason         String
  createdAt     DateTime   @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime   @default(now()) @db.Timestamptz(6) @map("updated_at")
  attendance     Attendance @relation(fields: [attendanceIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "attendance_idx_fk")
  student        Student    @relation(fields: [studentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "student_idx_fk")

  @@id([attendanceIdx, studentIdx], map: "outing_pk")
}

enum TYPE {
  STUDENT
  REAPEATER
}
